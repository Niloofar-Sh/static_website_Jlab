def model composed_model as
	def import using "units_BG.cellml" for
		unit concentrationUnit using unit concentrationUnit;
		unit speciesConstantUnit using unit speciesConstantUnit;
		unit fluxUnit using unit fluxUnit;
	enddef;
	def comp main as
		var t: second {init: 0};
		var Ai: concentrationUnit {init: 0.0};
		var Ei: concentrationUnit {init: 8.870334730839383e-06};
		var EAo: concentrationUnit {init: 8.870334730839383e-06};
		var Eo: concentrationUnit {init: 8.870334730839383e-06};
		var EAi: concentrationUnit {init: 8.870334730839383e-06};
		var Ao: concentrationUnit {init: 0.0};
		var Re1: fluxUnit ;
		var Re2: fluxUnit ;
		var Re3: fluxUnit ;
		var Re4: fluxUnit ;
		var k_1f: fluxUnit {init: 9.066148879032054};
		var k_1r: fluxUnit {init: 4.0774651998126355e-28};
		var k_2f: fluxUnit {init: 3.8472004801913737e-07};
		var k_2r: fluxUnit {init: 1.3411415864610834e-05};
		var k_3f: fluxUnit {init: 7340.1645633011485};
		var k_3r: fluxUnit {init: 0.1417231449343266};
		var k_4f: fluxUnit {init: 3455.7338437138555};
		var k_4r: fluxUnit {init: 9679.823467432494};

		ode(Ai,t)=+1.0{dimensionless}*Re1;
		ode(Ei,t)=+1.0{dimensionless}*Re1-1.0{dimensionless}*Re3;
		ode(EAo,t)=+1.0{dimensionless}*Re2-1.0{dimensionless}*Re4;
		ode(Eo,t)=-1.0{dimensionless}*Re2+1.0{dimensionless}*Re3;
		ode(EAi,t)=-1.0{dimensionless}*Re1+1.0{dimensionless}*Re4;
		ode(Ao,t)=-1.0{dimensionless}*Re2;

		 Re1= k_1f*(pow(EAi,1{dimensionless})) - k_1r*(pow(Ai,1{dimensionless}) * pow(Ei,1{dimensionless}));
		 Re2= k_2f*(pow(Eo,1{dimensionless}) * pow(Ao,1{dimensionless})) - k_2r*(pow(EAo,1{dimensionless}));
		 Re3= k_3f*(pow(Ei,1{dimensionless})) - k_3r*(pow(Eo,1{dimensionless}));
		 Re4= k_4f*(pow(EAo,1{dimensionless})) - k_4r*(pow(EAi,1{dimensionless}));
	enddef;
enddef;